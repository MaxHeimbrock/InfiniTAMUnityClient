// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: animus_companion.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Animus.Companion {

  /// <summary>Holder for reflection information generated from animus_companion.proto</summary>
  public static partial class AnimusCompanionReflection {

    #region Descriptor
    /// <summary>File descriptor for animus_companion.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnimusCompanionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZhbmltdXNfY29tcGFuaW9uLnByb3RvEhBhbmltdXMuY29tcGFuaW9uGhNh",
            "bmltdXNfY29tbW9uLnByb3RvGhRhbmltdXNfc3RydWN0cy5wcm90byKEAwoN",
            "RHJpdmVyTWVzc2FnZRI8CgZBY3Rpb24YASABKA4yLC5hbmltdXMuY29tcGFu",
            "aW9uLkRyaXZlck1lc3NhZ2UuRHJpdmVyQWN0aW9uEjAKC1BlcmZvcm1hbmNl",
            "GAIgAygLMhsuYW5pbXVzLnN0cnVjdHMuUGVyZm9ybWFuY2USFAoMRHJpdmVy",
            "QWN0aXZlGAMgASgIEisKB3ZlcnNpb24YBCABKAsyGi5hbmltdXMuY29tbW9u",
            "LlZlcnNpb25JbmZvEiMKBUVycm9yGAUgASgLMhQuYW5pbXVzLmNvbW1vbi5F",
            "cnJvchIKCgJJUBgGIAEoCRIMCgRwb3J0GAcgASgJIlAKDERyaXZlckFjdGlv",
            "bhITCg9HRVRfUEVSRk9STUFOQ0UQABIXChNDSEFOR0VfRFJJVkVSX1NUQVRF",
            "EAESEgoOSU5TVEFMTF9VUERBVEUQAyIvCgtEcml2ZXJTdGF0ZRIJCgVTVEFS",
            "VBAAEggKBFNUT1AQARILCgdSRVNUQVJUEAIi4wEKFEluc3RhbGxEcml2ZXJN",
            "ZXNzYWdlEhAKCGlzVXBkYXRlGAEgASgIEhAKCHVzZXJuYW1lGAIgASgJEhAK",
            "CHBhc3N3b3JkGAMgASgJEg8KB3JvYm90SUQYBCABKAkSEQoJcm9ib3ROYW1l",
            "GAUgASgJEhEKCXJvYm90VXNlchgGIAEoCRIVCg1yb2JvdFBhc3N3b3JkGAcg",
            "ASgJEg8KB3JvYm90SVAYCCABKAkSEAoIcGFpckNvZGUYCSABKAkSFAoMc3Rv",
            "cmVMb2NhbGx5GAogASgIEg4KBmxvZ0RpchgLIAEoCUKGAQogY29tLmN5YmVy",
            "c2VsdmVzLmFuaW11cy5jb21wYW5pb25CFEFuaW11c0NvbXBhbmlvblByb3Rv",
            "SAFaJWdpdGh1Yi5jb20vQ3liZXJzZWx2ZXMvQW5pbXVzTWVzc2FnZXOiAg9B",
            "bmltdXNDb21wYW5pb26qAhBBbmltdXMuQ29tcGFuaW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Animus.Common.AnimusCommonReflection.Descriptor, global::Animus.Structs.AnimusStructsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Companion.DriverMessage), global::Animus.Companion.DriverMessage.Parser, new[]{ "Action", "Performance", "DriverActive", "Version", "Error", "IP", "Port" }, null, new[]{ typeof(global::Animus.Companion.DriverMessage.Types.DriverAction), typeof(global::Animus.Companion.DriverMessage.Types.DriverState) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Companion.InstallDriverMessage), global::Animus.Companion.InstallDriverMessage.Parser, new[]{ "IsUpdate", "Username", "Password", "RobotID", "RobotName", "RobotUser", "RobotPassword", "RobotIP", "PairCode", "StoreLocally", "LogDir" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DriverMessage : pb::IMessage<DriverMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DriverMessage> _parser = new pb::MessageParser<DriverMessage>(() => new DriverMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriverMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Companion.AnimusCompanionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverMessage(DriverMessage other) : this() {
      action_ = other.action_;
      performance_ = other.performance_.Clone();
      driverActive_ = other.driverActive_;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      error_ = other.error_ != null ? other.error_.Clone() : null;
      iP_ = other.iP_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriverMessage Clone() {
      return new DriverMessage(this);
    }

    /// <summary>Field number for the "Action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::Animus.Companion.DriverMessage.Types.DriverAction action_ = global::Animus.Companion.DriverMessage.Types.DriverAction.GetPerformance;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Animus.Companion.DriverMessage.Types.DriverAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "Performance" field.</summary>
    public const int PerformanceFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Animus.Structs.Performance> _repeated_performance_codec
        = pb::FieldCodec.ForMessage(18, global::Animus.Structs.Performance.Parser);
    private readonly pbc::RepeatedField<global::Animus.Structs.Performance> performance_ = new pbc::RepeatedField<global::Animus.Structs.Performance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Animus.Structs.Performance> Performance {
      get { return performance_; }
    }

    /// <summary>Field number for the "DriverActive" field.</summary>
    public const int DriverActiveFieldNumber = 3;
    private bool driverActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverActive {
      get { return driverActive_; }
      set {
        driverActive_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private global::Animus.Common.VersionInfo version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Animus.Common.VersionInfo Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "Error" field.</summary>
    public const int ErrorFieldNumber = 5;
    private global::Animus.Common.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Animus.Common.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 6;
    private string iP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 7;
    private string port_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Port {
      get { return port_; }
      set {
        port_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriverMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriverMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if(!performance_.Equals(other.performance_)) return false;
      if (DriverActive != other.DriverActive) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (IP != other.IP) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != global::Animus.Companion.DriverMessage.Types.DriverAction.GetPerformance) hash ^= Action.GetHashCode();
      hash ^= performance_.GetHashCode();
      if (DriverActive != false) hash ^= DriverActive.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (error_ != null) hash ^= Error.GetHashCode();
      if (IP.Length != 0) hash ^= IP.GetHashCode();
      if (Port.Length != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Action != global::Animus.Companion.DriverMessage.Types.DriverAction.GetPerformance) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      performance_.WriteTo(output, _repeated_performance_codec);
      if (DriverActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(DriverActive);
      }
      if (version_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Version);
      }
      if (error_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Error);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IP);
      }
      if (Port.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Action != global::Animus.Companion.DriverMessage.Types.DriverAction.GetPerformance) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      performance_.WriteTo(ref output, _repeated_performance_codec);
      if (DriverActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(DriverActive);
      }
      if (version_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Version);
      }
      if (error_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Error);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(IP);
      }
      if (Port.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != global::Animus.Companion.DriverMessage.Types.DriverAction.GetPerformance) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      size += performance_.CalculateSize(_repeated_performance_codec);
      if (DriverActive != false) {
        size += 1 + 1;
      }
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      if (Port.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriverMessage other) {
      if (other == null) {
        return;
      }
      if (other.Action != global::Animus.Companion.DriverMessage.Types.DriverAction.GetPerformance) {
        Action = other.Action;
      }
      performance_.Add(other.performance_);
      if (other.DriverActive != false) {
        DriverActive = other.DriverActive;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::Animus.Common.VersionInfo();
        }
        Version.MergeFrom(other.Version);
      }
      if (other.error_ != null) {
        if (error_ == null) {
          Error = new global::Animus.Common.Error();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.IP.Length != 0) {
        IP = other.IP;
      }
      if (other.Port.Length != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Action = (global::Animus.Companion.DriverMessage.Types.DriverAction) input.ReadEnum();
            break;
          }
          case 18: {
            performance_.AddEntriesFrom(input, _repeated_performance_codec);
            break;
          }
          case 24: {
            DriverActive = input.ReadBool();
            break;
          }
          case 34: {
            if (version_ == null) {
              Version = new global::Animus.Common.VersionInfo();
            }
            input.ReadMessage(Version);
            break;
          }
          case 42: {
            if (error_ == null) {
              Error = new global::Animus.Common.Error();
            }
            input.ReadMessage(Error);
            break;
          }
          case 50: {
            IP = input.ReadString();
            break;
          }
          case 58: {
            Port = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Action = (global::Animus.Companion.DriverMessage.Types.DriverAction) input.ReadEnum();
            break;
          }
          case 18: {
            performance_.AddEntriesFrom(ref input, _repeated_performance_codec);
            break;
          }
          case 24: {
            DriverActive = input.ReadBool();
            break;
          }
          case 34: {
            if (version_ == null) {
              Version = new global::Animus.Common.VersionInfo();
            }
            input.ReadMessage(Version);
            break;
          }
          case 42: {
            if (error_ == null) {
              Error = new global::Animus.Common.Error();
            }
            input.ReadMessage(Error);
            break;
          }
          case 50: {
            IP = input.ReadString();
            break;
          }
          case 58: {
            Port = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DriverMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DriverAction {
        [pbr::OriginalName("GET_PERFORMANCE")] GetPerformance = 0,
        [pbr::OriginalName("CHANGE_DRIVER_STATE")] ChangeDriverState = 1,
        [pbr::OriginalName("INSTALL_UPDATE")] InstallUpdate = 3,
      }

      public enum DriverState {
        [pbr::OriginalName("START")] Start = 0,
        [pbr::OriginalName("STOP")] Stop = 1,
        [pbr::OriginalName("RESTART")] Restart = 2,
      }

    }
    #endregion

  }

  public sealed partial class InstallDriverMessage : pb::IMessage<InstallDriverMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstallDriverMessage> _parser = new pb::MessageParser<InstallDriverMessage>(() => new InstallDriverMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstallDriverMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Companion.AnimusCompanionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstallDriverMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstallDriverMessage(InstallDriverMessage other) : this() {
      isUpdate_ = other.isUpdate_;
      username_ = other.username_;
      password_ = other.password_;
      robotID_ = other.robotID_;
      robotName_ = other.robotName_;
      robotUser_ = other.robotUser_;
      robotPassword_ = other.robotPassword_;
      robotIP_ = other.robotIP_;
      pairCode_ = other.pairCode_;
      storeLocally_ = other.storeLocally_;
      logDir_ = other.logDir_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstallDriverMessage Clone() {
      return new InstallDriverMessage(this);
    }

    /// <summary>Field number for the "isUpdate" field.</summary>
    public const int IsUpdateFieldNumber = 1;
    private bool isUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUpdate {
      get { return isUpdate_; }
      set {
        isUpdate_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robotID" field.</summary>
    public const int RobotIDFieldNumber = 4;
    private string robotID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotID {
      get { return robotID_; }
      set {
        robotID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robotName" field.</summary>
    public const int RobotNameFieldNumber = 5;
    private string robotName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotName {
      get { return robotName_; }
      set {
        robotName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robotUser" field.</summary>
    public const int RobotUserFieldNumber = 6;
    private string robotUser_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotUser {
      get { return robotUser_; }
      set {
        robotUser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robotPassword" field.</summary>
    public const int RobotPasswordFieldNumber = 7;
    private string robotPassword_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotPassword {
      get { return robotPassword_; }
      set {
        robotPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robotIP" field.</summary>
    public const int RobotIPFieldNumber = 8;
    private string robotIP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotIP {
      get { return robotIP_; }
      set {
        robotIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pairCode" field.</summary>
    public const int PairCodeFieldNumber = 9;
    private string pairCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PairCode {
      get { return pairCode_; }
      set {
        pairCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "storeLocally" field.</summary>
    public const int StoreLocallyFieldNumber = 10;
    private bool storeLocally_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StoreLocally {
      get { return storeLocally_; }
      set {
        storeLocally_ = value;
      }
    }

    /// <summary>Field number for the "logDir" field.</summary>
    public const int LogDirFieldNumber = 11;
    private string logDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogDir {
      get { return logDir_; }
      set {
        logDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstallDriverMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstallDriverMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsUpdate != other.IsUpdate) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (RobotID != other.RobotID) return false;
      if (RobotName != other.RobotName) return false;
      if (RobotUser != other.RobotUser) return false;
      if (RobotPassword != other.RobotPassword) return false;
      if (RobotIP != other.RobotIP) return false;
      if (PairCode != other.PairCode) return false;
      if (StoreLocally != other.StoreLocally) return false;
      if (LogDir != other.LogDir) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsUpdate != false) hash ^= IsUpdate.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (RobotID.Length != 0) hash ^= RobotID.GetHashCode();
      if (RobotName.Length != 0) hash ^= RobotName.GetHashCode();
      if (RobotUser.Length != 0) hash ^= RobotUser.GetHashCode();
      if (RobotPassword.Length != 0) hash ^= RobotPassword.GetHashCode();
      if (RobotIP.Length != 0) hash ^= RobotIP.GetHashCode();
      if (PairCode.Length != 0) hash ^= PairCode.GetHashCode();
      if (StoreLocally != false) hash ^= StoreLocally.GetHashCode();
      if (LogDir.Length != 0) hash ^= LogDir.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IsUpdate != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsUpdate);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (RobotID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RobotID);
      }
      if (RobotName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RobotName);
      }
      if (RobotUser.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RobotUser);
      }
      if (RobotPassword.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RobotPassword);
      }
      if (RobotIP.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RobotIP);
      }
      if (PairCode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PairCode);
      }
      if (StoreLocally != false) {
        output.WriteRawTag(80);
        output.WriteBool(StoreLocally);
      }
      if (LogDir.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LogDir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IsUpdate != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsUpdate);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (RobotID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RobotID);
      }
      if (RobotName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RobotName);
      }
      if (RobotUser.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RobotUser);
      }
      if (RobotPassword.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RobotPassword);
      }
      if (RobotIP.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(RobotIP);
      }
      if (PairCode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PairCode);
      }
      if (StoreLocally != false) {
        output.WriteRawTag(80);
        output.WriteBool(StoreLocally);
      }
      if (LogDir.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(LogDir);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsUpdate != false) {
        size += 1 + 1;
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (RobotID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotID);
      }
      if (RobotName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotName);
      }
      if (RobotUser.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotUser);
      }
      if (RobotPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotPassword);
      }
      if (RobotIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotIP);
      }
      if (PairCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PairCode);
      }
      if (StoreLocally != false) {
        size += 1 + 1;
      }
      if (LogDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogDir);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstallDriverMessage other) {
      if (other == null) {
        return;
      }
      if (other.IsUpdate != false) {
        IsUpdate = other.IsUpdate;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.RobotID.Length != 0) {
        RobotID = other.RobotID;
      }
      if (other.RobotName.Length != 0) {
        RobotName = other.RobotName;
      }
      if (other.RobotUser.Length != 0) {
        RobotUser = other.RobotUser;
      }
      if (other.RobotPassword.Length != 0) {
        RobotPassword = other.RobotPassword;
      }
      if (other.RobotIP.Length != 0) {
        RobotIP = other.RobotIP;
      }
      if (other.PairCode.Length != 0) {
        PairCode = other.PairCode;
      }
      if (other.StoreLocally != false) {
        StoreLocally = other.StoreLocally;
      }
      if (other.LogDir.Length != 0) {
        LogDir = other.LogDir;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsUpdate = input.ReadBool();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            RobotID = input.ReadString();
            break;
          }
          case 42: {
            RobotName = input.ReadString();
            break;
          }
          case 50: {
            RobotUser = input.ReadString();
            break;
          }
          case 58: {
            RobotPassword = input.ReadString();
            break;
          }
          case 66: {
            RobotIP = input.ReadString();
            break;
          }
          case 74: {
            PairCode = input.ReadString();
            break;
          }
          case 80: {
            StoreLocally = input.ReadBool();
            break;
          }
          case 90: {
            LogDir = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IsUpdate = input.ReadBool();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            RobotID = input.ReadString();
            break;
          }
          case 42: {
            RobotName = input.ReadString();
            break;
          }
          case 50: {
            RobotUser = input.ReadString();
            break;
          }
          case 58: {
            RobotPassword = input.ReadString();
            break;
          }
          case 66: {
            RobotIP = input.ReadString();
            break;
          }
          case 74: {
            PairCode = input.ReadString();
            break;
          }
          case 80: {
            StoreLocally = input.ReadBool();
            break;
          }
          case 90: {
            LogDir = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
