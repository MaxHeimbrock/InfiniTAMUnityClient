// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: animus_structs.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Animus.Structs {

  /// <summary>Holder for reflection information generated from animus_structs.proto</summary>
  public static partial class AnimusStructsReflection {

    #region Descriptor
    /// <summary>File descriptor for animus_structs.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnimusStructsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRhbmltdXNfc3RydWN0cy5wcm90bxIOYW5pbXVzLnN0cnVjdHMigQEKCExv",
            "Y2F0aW9uEgoKAmlwGAEgASgJEhAKCGhvc3RuYW1lGAIgASgJEgwKBGNpdHkY",
            "AyABKAkSDgoGcmVnaW9uGAQgASgJEg8KB2NvdW50cnkYBSABKAkSCwoDbG9j",
            "GAYgASgJEg4KBnBvc3RhbBgHIAEoCRILCgNvcmcYCCABKAkioAEKC0F1ZGlv",
            "UGFyYW1zEhAKCEJhY2tlbmRzGAEgAygJEhIKClNhbXBsZVJhdGUYAiABKA0S",
            "EAoIQ2hhbm5lbHMYAyABKA0SFAoMU2l6ZUluRnJhbWVzGAQgASgIEhQKDFRy",
            "YW5zbWl0UmF0ZRgFIAEoDRIXCg9jYXB0dXJlTW9kYWxpdHkYBiABKAkSFAoM",
            "c2lua01vZGFsaXR5GAcgASgJIlUKCUdlb1N0cnVjdBIQCghVcHBlckxhdBgB",
            "IAEoARIQCghMb3dlckxhdBgCIAEoARIRCglVcHBlckxvbmcYAyABKAESEQoJ",
            "TG93ZXJMb25nGAQgASgBIlAKDEFzc2V0TGljZW5zZRIQCghhc3NldF9pZBgB",
            "IAEoCRIuCg1hc3NldF9saWNlbnNlGAIgASgLMhcuYW5pbXVzLnN0cnVjdHMu",
            "TGljZW5zZSK1AQoMUm9ib3RMaWNlbnNlEhAKCHJvYm90X2lkGAEgASgJEhAK",
            "CGFzc2V0X2lkGAIgASgJEi4KDXJvYm90X2xpY2Vuc2UYAyABKAsyFy5hbmlt",
            "dXMuc3RydWN0cy5MaWNlbnNlEhIKCnJvYm90X21ha2UYBCABKAkSEwoLcm9i",
            "b3RfbW9kZWwYBSABKAkSEQoJcGFpcl9jb2RlGAYgASgJEhUKDXBhaXJlZF9z",
            "dGF0dXMYByABKAgiVQoHTGljZW5zZRISCgpsaWNlbnNlX2lkGAEgASgJEhIK",
            "CnN0YXJ0X2RhdGUYAyABKAMSEAoIZHVyYXRpb24YBCABKAMSEAoIZW5kX2Rh",
            "dGUYBSABKAMiMgoFU2hhcmUSFwoPcmVjaXBpZW50X2VtYWlsGAEgASgJEhAK",
            "CGR1cmF0aW9uGAIgASgDIh0KCklDRURldGFpbHMSDwoHZGV0YWlscxgBIAEo",
            "CSKvAQoFQXNzZXQSCgoCaWQYASABKAkSDAoEdHlwZRgCIAEoCRIMCgRuYW1l",
            "GAMgASgJEhMKC2Rlc2NyaXB0aW9uGAQgASgJEg4KBmF1dGhvchgFIAEoCRIP",
            "CgdsaWNlbnNlGAYgASgJEgwKBG1ha2UYByABKAkSDQoFbW9kZWwYCCABKAkS",
            "KwoJYXJ0aWZhY3RzGAkgAygLMhguYW5pbXVzLnN0cnVjdHMuQXJ0aWZhY3Qi",
            "vQEKCEFydGlmYWN0EgwKBHBhdGgYASABKAkSEAoIYXNzZXRfaWQYAiABKAkS",
            "CgoCT1MYAyABKAkSDAoEQXJjaBgEIAEoCRIUCgxWZXJzaW9uTWFqb3IYBSAB",
            "KA0SFAoMVmVyc2lvbk1pbm9yGAYgASgNEhQKDFZlcnNpb25QYXRjaBgHIAEo",
            "DRIQCghsYW5ndWFnZRgIIAEoCRIRCgl0aW1lc3RhbXAYCSABKAMSEAoIY2hl",
            "Y2tzdW0YCiABKAwicwoLUGVyZm9ybWFuY2USDAoETmFtZRgBIAEoCRITCgtE",
            "ZXNjcmlwdGlvbhgCIAEoCRISCgpBdmVyYWdlRlBTGAMgASgBEhYKDkF2ZXJh",
            "Z2VMYXRlbmN5GAQgASgBEhUKDUZyYW1lc0Ryb3BwZWQYBSABKAFCfgoeY29t",
            "LmN5YmVyc2VsdmVzLmFuaW11cy5zdHJ1Y3RzQhJBbmltdXNTdHJ1Y3RzUHJv",
            "dG9IAVolZ2l0aHViLmNvbS9DeWJlcnNlbHZlcy9BbmltdXNNZXNzYWdlc6IC",
            "DUFuaW11c1N0cnVjdHOqAg5BbmltdXMuU3RydWN0c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Structs.Location), global::Animus.Structs.Location.Parser, new[]{ "Ip", "Hostname", "City", "Region", "Country", "Loc", "Postal", "Org" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Structs.AudioParams), global::Animus.Structs.AudioParams.Parser, new[]{ "Backends", "SampleRate", "Channels", "SizeInFrames", "TransmitRate", "CaptureModality", "SinkModality" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Structs.GeoStruct), global::Animus.Structs.GeoStruct.Parser, new[]{ "UpperLat", "LowerLat", "UpperLong", "LowerLong" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Structs.AssetLicense), global::Animus.Structs.AssetLicense.Parser, new[]{ "AssetId", "AssetLicense_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Structs.RobotLicense), global::Animus.Structs.RobotLicense.Parser, new[]{ "RobotId", "AssetId", "RobotLicense_", "RobotMake", "RobotModel", "PairCode", "PairedStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Structs.License), global::Animus.Structs.License.Parser, new[]{ "LicenseId", "StartDate", "Duration", "EndDate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Structs.Share), global::Animus.Structs.Share.Parser, new[]{ "RecipientEmail", "Duration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Structs.ICEDetails), global::Animus.Structs.ICEDetails.Parser, new[]{ "Details" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Structs.Asset), global::Animus.Structs.Asset.Parser, new[]{ "Id", "Type", "Name", "Description", "Author", "License", "Make", "Model", "Artifacts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Structs.Artifact), global::Animus.Structs.Artifact.Parser, new[]{ "Path", "AssetId", "OS", "Arch", "VersionMajor", "VersionMinor", "VersionPatch", "Language", "Timestamp", "Checksum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Animus.Structs.Performance), global::Animus.Structs.Performance.Parser, new[]{ "Name", "Description", "AverageFPS", "AverageLatency", "FramesDropped" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Location : pb::IMessage<Location>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Location> _parser = new pb::MessageParser<Location>(() => new Location());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Location> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Structs.AnimusStructsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location(Location other) : this() {
      ip_ = other.ip_;
      hostname_ = other.hostname_;
      city_ = other.city_;
      region_ = other.region_;
      country_ = other.country_;
      loc_ = other.loc_;
      postal_ = other.postal_;
      org_ = other.org_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Location Clone() {
      return new Location(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 2;
    private string hostname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hostname {
      get { return hostname_; }
      set {
        hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "city" field.</summary>
    public const int CityFieldNumber = 3;
    private string city_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string City {
      get { return city_; }
      set {
        city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 4;
    private string region_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 5;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loc" field.</summary>
    public const int LocFieldNumber = 6;
    private string loc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Loc {
      get { return loc_; }
      set {
        loc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "postal" field.</summary>
    public const int PostalFieldNumber = 7;
    private string postal_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Postal {
      get { return postal_; }
      set {
        postal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "org" field.</summary>
    public const int OrgFieldNumber = 8;
    private string org_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Org {
      get { return org_; }
      set {
        org_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Location);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Location other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Hostname != other.Hostname) return false;
      if (City != other.City) return false;
      if (Region != other.Region) return false;
      if (Country != other.Country) return false;
      if (Loc != other.Loc) return false;
      if (Postal != other.Postal) return false;
      if (Org != other.Org) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (Loc.Length != 0) hash ^= Loc.GetHashCode();
      if (Postal.Length != 0) hash ^= Postal.GetHashCode();
      if (Org.Length != 0) hash ^= Org.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Hostname);
      }
      if (City.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(City);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Region);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Country);
      }
      if (Loc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Loc);
      }
      if (Postal.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Postal);
      }
      if (Org.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Org);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Hostname);
      }
      if (City.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(City);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Region);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Country);
      }
      if (Loc.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Loc);
      }
      if (Postal.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Postal);
      }
      if (Org.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Org);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Hostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (Loc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Loc);
      }
      if (Postal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Postal);
      }
      if (Org.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Org);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Location other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Hostname.Length != 0) {
        Hostname = other.Hostname;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.Loc.Length != 0) {
        Loc = other.Loc;
      }
      if (other.Postal.Length != 0) {
        Postal = other.Postal;
      }
      if (other.Org.Length != 0) {
        Org = other.Org;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Hostname = input.ReadString();
            break;
          }
          case 26: {
            City = input.ReadString();
            break;
          }
          case 34: {
            Region = input.ReadString();
            break;
          }
          case 42: {
            Country = input.ReadString();
            break;
          }
          case 50: {
            Loc = input.ReadString();
            break;
          }
          case 58: {
            Postal = input.ReadString();
            break;
          }
          case 66: {
            Org = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Hostname = input.ReadString();
            break;
          }
          case 26: {
            City = input.ReadString();
            break;
          }
          case 34: {
            Region = input.ReadString();
            break;
          }
          case 42: {
            Country = input.ReadString();
            break;
          }
          case 50: {
            Loc = input.ReadString();
            break;
          }
          case 58: {
            Postal = input.ReadString();
            break;
          }
          case 66: {
            Org = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AudioParams : pb::IMessage<AudioParams>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AudioParams> _parser = new pb::MessageParser<AudioParams>(() => new AudioParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Structs.AnimusStructsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioParams(AudioParams other) : this() {
      backends_ = other.backends_.Clone();
      sampleRate_ = other.sampleRate_;
      channels_ = other.channels_;
      sizeInFrames_ = other.sizeInFrames_;
      transmitRate_ = other.transmitRate_;
      captureModality_ = other.captureModality_;
      sinkModality_ = other.sinkModality_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioParams Clone() {
      return new AudioParams(this);
    }

    /// <summary>Field number for the "Backends" field.</summary>
    public const int BackendsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_backends_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> backends_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Backends {
      get { return backends_; }
    }

    /// <summary>Field number for the "SampleRate" field.</summary>
    public const int SampleRateFieldNumber = 2;
    private uint sampleRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SampleRate {
      get { return sampleRate_; }
      set {
        sampleRate_ = value;
      }
    }

    /// <summary>Field number for the "Channels" field.</summary>
    public const int ChannelsFieldNumber = 3;
    private uint channels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Channels {
      get { return channels_; }
      set {
        channels_ = value;
      }
    }

    /// <summary>Field number for the "SizeInFrames" field.</summary>
    public const int SizeInFramesFieldNumber = 4;
    private bool sizeInFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SizeInFrames {
      get { return sizeInFrames_; }
      set {
        sizeInFrames_ = value;
      }
    }

    /// <summary>Field number for the "TransmitRate" field.</summary>
    public const int TransmitRateFieldNumber = 5;
    private uint transmitRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TransmitRate {
      get { return transmitRate_; }
      set {
        transmitRate_ = value;
      }
    }

    /// <summary>Field number for the "captureModality" field.</summary>
    public const int CaptureModalityFieldNumber = 6;
    private string captureModality_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CaptureModality {
      get { return captureModality_; }
      set {
        captureModality_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sinkModality" field.</summary>
    public const int SinkModalityFieldNumber = 7;
    private string sinkModality_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SinkModality {
      get { return sinkModality_; }
      set {
        sinkModality_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!backends_.Equals(other.backends_)) return false;
      if (SampleRate != other.SampleRate) return false;
      if (Channels != other.Channels) return false;
      if (SizeInFrames != other.SizeInFrames) return false;
      if (TransmitRate != other.TransmitRate) return false;
      if (CaptureModality != other.CaptureModality) return false;
      if (SinkModality != other.SinkModality) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= backends_.GetHashCode();
      if (SampleRate != 0) hash ^= SampleRate.GetHashCode();
      if (Channels != 0) hash ^= Channels.GetHashCode();
      if (SizeInFrames != false) hash ^= SizeInFrames.GetHashCode();
      if (TransmitRate != 0) hash ^= TransmitRate.GetHashCode();
      if (CaptureModality.Length != 0) hash ^= CaptureModality.GetHashCode();
      if (SinkModality.Length != 0) hash ^= SinkModality.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      backends_.WriteTo(output, _repeated_backends_codec);
      if (SampleRate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SampleRate);
      }
      if (Channels != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Channels);
      }
      if (SizeInFrames != false) {
        output.WriteRawTag(32);
        output.WriteBool(SizeInFrames);
      }
      if (TransmitRate != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TransmitRate);
      }
      if (CaptureModality.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CaptureModality);
      }
      if (SinkModality.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SinkModality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      backends_.WriteTo(ref output, _repeated_backends_codec);
      if (SampleRate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SampleRate);
      }
      if (Channels != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Channels);
      }
      if (SizeInFrames != false) {
        output.WriteRawTag(32);
        output.WriteBool(SizeInFrames);
      }
      if (TransmitRate != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TransmitRate);
      }
      if (CaptureModality.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CaptureModality);
      }
      if (SinkModality.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SinkModality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += backends_.CalculateSize(_repeated_backends_codec);
      if (SampleRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SampleRate);
      }
      if (Channels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channels);
      }
      if (SizeInFrames != false) {
        size += 1 + 1;
      }
      if (TransmitRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TransmitRate);
      }
      if (CaptureModality.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CaptureModality);
      }
      if (SinkModality.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SinkModality);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioParams other) {
      if (other == null) {
        return;
      }
      backends_.Add(other.backends_);
      if (other.SampleRate != 0) {
        SampleRate = other.SampleRate;
      }
      if (other.Channels != 0) {
        Channels = other.Channels;
      }
      if (other.SizeInFrames != false) {
        SizeInFrames = other.SizeInFrames;
      }
      if (other.TransmitRate != 0) {
        TransmitRate = other.TransmitRate;
      }
      if (other.CaptureModality.Length != 0) {
        CaptureModality = other.CaptureModality;
      }
      if (other.SinkModality.Length != 0) {
        SinkModality = other.SinkModality;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            backends_.AddEntriesFrom(input, _repeated_backends_codec);
            break;
          }
          case 16: {
            SampleRate = input.ReadUInt32();
            break;
          }
          case 24: {
            Channels = input.ReadUInt32();
            break;
          }
          case 32: {
            SizeInFrames = input.ReadBool();
            break;
          }
          case 40: {
            TransmitRate = input.ReadUInt32();
            break;
          }
          case 50: {
            CaptureModality = input.ReadString();
            break;
          }
          case 58: {
            SinkModality = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            backends_.AddEntriesFrom(ref input, _repeated_backends_codec);
            break;
          }
          case 16: {
            SampleRate = input.ReadUInt32();
            break;
          }
          case 24: {
            Channels = input.ReadUInt32();
            break;
          }
          case 32: {
            SizeInFrames = input.ReadBool();
            break;
          }
          case 40: {
            TransmitRate = input.ReadUInt32();
            break;
          }
          case 50: {
            CaptureModality = input.ReadString();
            break;
          }
          case 58: {
            SinkModality = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GeoStruct : pb::IMessage<GeoStruct>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GeoStruct> _parser = new pb::MessageParser<GeoStruct>(() => new GeoStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeoStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Structs.AnimusStructsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoStruct(GeoStruct other) : this() {
      upperLat_ = other.upperLat_;
      lowerLat_ = other.lowerLat_;
      upperLong_ = other.upperLong_;
      lowerLong_ = other.lowerLong_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeoStruct Clone() {
      return new GeoStruct(this);
    }

    /// <summary>Field number for the "UpperLat" field.</summary>
    public const int UpperLatFieldNumber = 1;
    private double upperLat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UpperLat {
      get { return upperLat_; }
      set {
        upperLat_ = value;
      }
    }

    /// <summary>Field number for the "LowerLat" field.</summary>
    public const int LowerLatFieldNumber = 2;
    private double lowerLat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowerLat {
      get { return lowerLat_; }
      set {
        lowerLat_ = value;
      }
    }

    /// <summary>Field number for the "UpperLong" field.</summary>
    public const int UpperLongFieldNumber = 3;
    private double upperLong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UpperLong {
      get { return upperLong_; }
      set {
        upperLong_ = value;
      }
    }

    /// <summary>Field number for the "LowerLong" field.</summary>
    public const int LowerLongFieldNumber = 4;
    private double lowerLong_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LowerLong {
      get { return lowerLong_; }
      set {
        lowerLong_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeoStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeoStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpperLat, other.UpperLat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowerLat, other.LowerLat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpperLong, other.UpperLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowerLong, other.LowerLong)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpperLat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpperLat);
      if (LowerLat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowerLat);
      if (UpperLong != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpperLong);
      if (LowerLong != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowerLong);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UpperLat != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(UpperLat);
      }
      if (LowerLat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LowerLat);
      }
      if (UpperLong != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(UpperLong);
      }
      if (LowerLong != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LowerLong);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UpperLat != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(UpperLat);
      }
      if (LowerLat != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LowerLat);
      }
      if (UpperLong != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(UpperLong);
      }
      if (LowerLong != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LowerLong);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpperLat != 0D) {
        size += 1 + 8;
      }
      if (LowerLat != 0D) {
        size += 1 + 8;
      }
      if (UpperLong != 0D) {
        size += 1 + 8;
      }
      if (LowerLong != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeoStruct other) {
      if (other == null) {
        return;
      }
      if (other.UpperLat != 0D) {
        UpperLat = other.UpperLat;
      }
      if (other.LowerLat != 0D) {
        LowerLat = other.LowerLat;
      }
      if (other.UpperLong != 0D) {
        UpperLong = other.UpperLong;
      }
      if (other.LowerLong != 0D) {
        LowerLong = other.LowerLong;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            UpperLat = input.ReadDouble();
            break;
          }
          case 17: {
            LowerLat = input.ReadDouble();
            break;
          }
          case 25: {
            UpperLong = input.ReadDouble();
            break;
          }
          case 33: {
            LowerLong = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            UpperLat = input.ReadDouble();
            break;
          }
          case 17: {
            LowerLat = input.ReadDouble();
            break;
          }
          case 25: {
            UpperLong = input.ReadDouble();
            break;
          }
          case 33: {
            LowerLong = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AssetLicense : pb::IMessage<AssetLicense>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AssetLicense> _parser = new pb::MessageParser<AssetLicense>(() => new AssetLicense());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetLicense> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Structs.AnimusStructsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetLicense() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetLicense(AssetLicense other) : this() {
      assetId_ = other.assetId_;
      assetLicense_ = other.assetLicense_ != null ? other.assetLicense_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetLicense Clone() {
      return new AssetLicense(this);
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 1;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_license" field.</summary>
    public const int AssetLicense_FieldNumber = 2;
    private global::Animus.Structs.License assetLicense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Animus.Structs.License AssetLicense_ {
      get { return assetLicense_; }
      set {
        assetLicense_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetLicense);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetLicense other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetId != other.AssetId) return false;
      if (!object.Equals(AssetLicense_, other.AssetLicense_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (assetLicense_ != null) hash ^= AssetLicense_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AssetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetId);
      }
      if (assetLicense_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AssetLicense_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AssetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetId);
      }
      if (assetLicense_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AssetLicense_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (assetLicense_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AssetLicense_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetLicense other) {
      if (other == null) {
        return;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.assetLicense_ != null) {
        if (assetLicense_ == null) {
          AssetLicense_ = new global::Animus.Structs.License();
        }
        AssetLicense_.MergeFrom(other.AssetLicense_);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AssetId = input.ReadString();
            break;
          }
          case 18: {
            if (assetLicense_ == null) {
              AssetLicense_ = new global::Animus.Structs.License();
            }
            input.ReadMessage(AssetLicense_);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            AssetId = input.ReadString();
            break;
          }
          case 18: {
            if (assetLicense_ == null) {
              AssetLicense_ = new global::Animus.Structs.License();
            }
            input.ReadMessage(AssetLicense_);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RobotLicense : pb::IMessage<RobotLicense>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RobotLicense> _parser = new pb::MessageParser<RobotLicense>(() => new RobotLicense());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotLicense> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Structs.AnimusStructsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotLicense() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotLicense(RobotLicense other) : this() {
      robotId_ = other.robotId_;
      assetId_ = other.assetId_;
      robotLicense_ = other.robotLicense_ != null ? other.robotLicense_.Clone() : null;
      robotMake_ = other.robotMake_;
      robotModel_ = other.robotModel_;
      pairCode_ = other.pairCode_;
      pairedStatus_ = other.pairedStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotLicense Clone() {
      return new RobotLicense(this);
    }

    /// <summary>Field number for the "robot_id" field.</summary>
    public const int RobotIdFieldNumber = 1;
    private string robotId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotId {
      get { return robotId_; }
      set {
        robotId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 2;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robot_license" field.</summary>
    public const int RobotLicense_FieldNumber = 3;
    private global::Animus.Structs.License robotLicense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Animus.Structs.License RobotLicense_ {
      get { return robotLicense_; }
      set {
        robotLicense_ = value;
      }
    }

    /// <summary>Field number for the "robot_make" field.</summary>
    public const int RobotMakeFieldNumber = 4;
    private string robotMake_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotMake {
      get { return robotMake_; }
      set {
        robotMake_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "robot_model" field.</summary>
    public const int RobotModelFieldNumber = 5;
    private string robotModel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RobotModel {
      get { return robotModel_; }
      set {
        robotModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pair_code" field.</summary>
    public const int PairCodeFieldNumber = 6;
    private string pairCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PairCode {
      get { return pairCode_; }
      set {
        pairCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "paired_status" field.</summary>
    public const int PairedStatusFieldNumber = 7;
    private bool pairedStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PairedStatus {
      get { return pairedStatus_; }
      set {
        pairedStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotLicense);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotLicense other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RobotId != other.RobotId) return false;
      if (AssetId != other.AssetId) return false;
      if (!object.Equals(RobotLicense_, other.RobotLicense_)) return false;
      if (RobotMake != other.RobotMake) return false;
      if (RobotModel != other.RobotModel) return false;
      if (PairCode != other.PairCode) return false;
      if (PairedStatus != other.PairedStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RobotId.Length != 0) hash ^= RobotId.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (robotLicense_ != null) hash ^= RobotLicense_.GetHashCode();
      if (RobotMake.Length != 0) hash ^= RobotMake.GetHashCode();
      if (RobotModel.Length != 0) hash ^= RobotModel.GetHashCode();
      if (PairCode.Length != 0) hash ^= PairCode.GetHashCode();
      if (PairedStatus != false) hash ^= PairedStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RobotId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RobotId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetId);
      }
      if (robotLicense_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RobotLicense_);
      }
      if (RobotMake.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RobotMake);
      }
      if (RobotModel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RobotModel);
      }
      if (PairCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PairCode);
      }
      if (PairedStatus != false) {
        output.WriteRawTag(56);
        output.WriteBool(PairedStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RobotId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RobotId);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetId);
      }
      if (robotLicense_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RobotLicense_);
      }
      if (RobotMake.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RobotMake);
      }
      if (RobotModel.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RobotModel);
      }
      if (PairCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PairCode);
      }
      if (PairedStatus != false) {
        output.WriteRawTag(56);
        output.WriteBool(PairedStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RobotId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotId);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (robotLicense_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotLicense_);
      }
      if (RobotMake.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotMake);
      }
      if (RobotModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RobotModel);
      }
      if (PairCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PairCode);
      }
      if (PairedStatus != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotLicense other) {
      if (other == null) {
        return;
      }
      if (other.RobotId.Length != 0) {
        RobotId = other.RobotId;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.robotLicense_ != null) {
        if (robotLicense_ == null) {
          RobotLicense_ = new global::Animus.Structs.License();
        }
        RobotLicense_.MergeFrom(other.RobotLicense_);
      }
      if (other.RobotMake.Length != 0) {
        RobotMake = other.RobotMake;
      }
      if (other.RobotModel.Length != 0) {
        RobotModel = other.RobotModel;
      }
      if (other.PairCode.Length != 0) {
        PairCode = other.PairCode;
      }
      if (other.PairedStatus != false) {
        PairedStatus = other.PairedStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RobotId = input.ReadString();
            break;
          }
          case 18: {
            AssetId = input.ReadString();
            break;
          }
          case 26: {
            if (robotLicense_ == null) {
              RobotLicense_ = new global::Animus.Structs.License();
            }
            input.ReadMessage(RobotLicense_);
            break;
          }
          case 34: {
            RobotMake = input.ReadString();
            break;
          }
          case 42: {
            RobotModel = input.ReadString();
            break;
          }
          case 50: {
            PairCode = input.ReadString();
            break;
          }
          case 56: {
            PairedStatus = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RobotId = input.ReadString();
            break;
          }
          case 18: {
            AssetId = input.ReadString();
            break;
          }
          case 26: {
            if (robotLicense_ == null) {
              RobotLicense_ = new global::Animus.Structs.License();
            }
            input.ReadMessage(RobotLicense_);
            break;
          }
          case 34: {
            RobotMake = input.ReadString();
            break;
          }
          case 42: {
            RobotModel = input.ReadString();
            break;
          }
          case 50: {
            PairCode = input.ReadString();
            break;
          }
          case 56: {
            PairedStatus = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class License : pb::IMessage<License>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<License> _parser = new pb::MessageParser<License>(() => new License());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<License> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Structs.AnimusStructsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License(License other) : this() {
      licenseId_ = other.licenseId_;
      startDate_ = other.startDate_;
      duration_ = other.duration_;
      endDate_ = other.endDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public License Clone() {
      return new License(this);
    }

    /// <summary>Field number for the "license_id" field.</summary>
    public const int LicenseIdFieldNumber = 1;
    private string licenseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LicenseId {
      get { return licenseId_; }
      set {
        licenseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_date" field.</summary>
    public const int StartDateFieldNumber = 3;
    private long startDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "end_date" field.</summary>
    public const int EndDateFieldNumber = 5;
    private long endDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndDate {
      get { return endDate_; }
      set {
        endDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as License);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(License other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LicenseId != other.LicenseId) return false;
      if (StartDate != other.StartDate) return false;
      if (Duration != other.Duration) return false;
      if (EndDate != other.EndDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LicenseId.Length != 0) hash ^= LicenseId.GetHashCode();
      if (StartDate != 0L) hash ^= StartDate.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (EndDate != 0L) hash ^= EndDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LicenseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LicenseId);
      }
      if (StartDate != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartDate);
      }
      if (Duration != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Duration);
      }
      if (EndDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EndDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LicenseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LicenseId);
      }
      if (StartDate != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartDate);
      }
      if (Duration != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Duration);
      }
      if (EndDate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EndDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LicenseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LicenseId);
      }
      if (StartDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDate);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (EndDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(License other) {
      if (other == null) {
        return;
      }
      if (other.LicenseId.Length != 0) {
        LicenseId = other.LicenseId;
      }
      if (other.StartDate != 0L) {
        StartDate = other.StartDate;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      if (other.EndDate != 0L) {
        EndDate = other.EndDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LicenseId = input.ReadString();
            break;
          }
          case 24: {
            StartDate = input.ReadInt64();
            break;
          }
          case 32: {
            Duration = input.ReadInt64();
            break;
          }
          case 40: {
            EndDate = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            LicenseId = input.ReadString();
            break;
          }
          case 24: {
            StartDate = input.ReadInt64();
            break;
          }
          case 32: {
            Duration = input.ReadInt64();
            break;
          }
          case 40: {
            EndDate = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Share : pb::IMessage<Share>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Share> _parser = new pb::MessageParser<Share>(() => new Share());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Share> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Structs.AnimusStructsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Share() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Share(Share other) : this() {
      recipientEmail_ = other.recipientEmail_;
      duration_ = other.duration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Share Clone() {
      return new Share(this);
    }

    /// <summary>Field number for the "recipient_email" field.</summary>
    public const int RecipientEmailFieldNumber = 1;
    private string recipientEmail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecipientEmail {
      get { return recipientEmail_; }
      set {
        recipientEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private long duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Share);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Share other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecipientEmail != other.RecipientEmail) return false;
      if (Duration != other.Duration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecipientEmail.Length != 0) hash ^= RecipientEmail.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RecipientEmail.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RecipientEmail);
      }
      if (Duration != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RecipientEmail.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RecipientEmail);
      }
      if (Duration != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecipientEmail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecipientEmail);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Share other) {
      if (other == null) {
        return;
      }
      if (other.RecipientEmail.Length != 0) {
        RecipientEmail = other.RecipientEmail;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RecipientEmail = input.ReadString();
            break;
          }
          case 16: {
            Duration = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RecipientEmail = input.ReadString();
            break;
          }
          case 16: {
            Duration = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ICEDetails : pb::IMessage<ICEDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ICEDetails> _parser = new pb::MessageParser<ICEDetails>(() => new ICEDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ICEDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Structs.AnimusStructsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ICEDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ICEDetails(ICEDetails other) : this() {
      details_ = other.details_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ICEDetails Clone() {
      return new ICEDetails(this);
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 1;
    private string details_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Details {
      get { return details_; }
      set {
        details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ICEDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ICEDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Details != other.Details) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Details.Length != 0) hash ^= Details.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Details.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Details);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Details.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Details);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Details.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ICEDetails other) {
      if (other == null) {
        return;
      }
      if (other.Details.Length != 0) {
        Details = other.Details;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Details = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Details = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Asset : pb::IMessage<Asset>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Asset> _parser = new pb::MessageParser<Asset>(() => new Asset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Asset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Structs.AnimusStructsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset(Asset other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      name_ = other.name_;
      description_ = other.description_;
      author_ = other.author_;
      license_ = other.license_;
      make_ = other.make_;
      model_ = other.model_;
      artifacts_ = other.artifacts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset Clone() {
      return new Asset(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 5;
    private string author_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "license" field.</summary>
    public const int LicenseFieldNumber = 6;
    private string license_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string License {
      get { return license_; }
      set {
        license_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "make" field.</summary>
    public const int MakeFieldNumber = 7;
    private string make_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Make {
      get { return make_; }
      set {
        make_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 8;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "artifacts" field.</summary>
    public const int ArtifactsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Animus.Structs.Artifact> _repeated_artifacts_codec
        = pb::FieldCodec.ForMessage(74, global::Animus.Structs.Artifact.Parser);
    private readonly pbc::RepeatedField<global::Animus.Structs.Artifact> artifacts_ = new pbc::RepeatedField<global::Animus.Structs.Artifact>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Animus.Structs.Artifact> Artifacts {
      get { return artifacts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Asset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Asset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Author != other.Author) return false;
      if (License != other.License) return false;
      if (Make != other.Make) return false;
      if (Model != other.Model) return false;
      if(!artifacts_.Equals(other.artifacts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (License.Length != 0) hash ^= License.GetHashCode();
      if (Make.Length != 0) hash ^= Make.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      hash ^= artifacts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Author);
      }
      if (License.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(License);
      }
      if (Make.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Make);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Model);
      }
      artifacts_.WriteTo(output, _repeated_artifacts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Author);
      }
      if (License.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(License);
      }
      if (Make.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Make);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Model);
      }
      artifacts_.WriteTo(ref output, _repeated_artifacts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (License.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(License);
      }
      if (Make.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Make);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      size += artifacts_.CalculateSize(_repeated_artifacts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Asset other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.License.Length != 0) {
        License = other.License;
      }
      if (other.Make.Length != 0) {
        Make = other.Make;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      artifacts_.Add(other.artifacts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            Author = input.ReadString();
            break;
          }
          case 50: {
            License = input.ReadString();
            break;
          }
          case 58: {
            Make = input.ReadString();
            break;
          }
          case 66: {
            Model = input.ReadString();
            break;
          }
          case 74: {
            artifacts_.AddEntriesFrom(input, _repeated_artifacts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            Author = input.ReadString();
            break;
          }
          case 50: {
            License = input.ReadString();
            break;
          }
          case 58: {
            Make = input.ReadString();
            break;
          }
          case 66: {
            Model = input.ReadString();
            break;
          }
          case 74: {
            artifacts_.AddEntriesFrom(ref input, _repeated_artifacts_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Artifact : pb::IMessage<Artifact>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Artifact> _parser = new pb::MessageParser<Artifact>(() => new Artifact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Artifact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Structs.AnimusStructsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact(Artifact other) : this() {
      path_ = other.path_;
      assetId_ = other.assetId_;
      oS_ = other.oS_;
      arch_ = other.arch_;
      versionMajor_ = other.versionMajor_;
      versionMinor_ = other.versionMinor_;
      versionPatch_ = other.versionPatch_;
      language_ = other.language_;
      timestamp_ = other.timestamp_;
      checksum_ = other.checksum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Artifact Clone() {
      return new Artifact(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 2;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OS" field.</summary>
    public const int OSFieldNumber = 3;
    private string oS_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OS {
      get { return oS_; }
      set {
        oS_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Arch" field.</summary>
    public const int ArchFieldNumber = 4;
    private string arch_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Arch {
      get { return arch_; }
      set {
        arch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VersionMajor" field.</summary>
    public const int VersionMajorFieldNumber = 5;
    private uint versionMajor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VersionMajor {
      get { return versionMajor_; }
      set {
        versionMajor_ = value;
      }
    }

    /// <summary>Field number for the "VersionMinor" field.</summary>
    public const int VersionMinorFieldNumber = 6;
    private uint versionMinor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VersionMinor {
      get { return versionMinor_; }
      set {
        versionMinor_ = value;
      }
    }

    /// <summary>Field number for the "VersionPatch" field.</summary>
    public const int VersionPatchFieldNumber = 7;
    private uint versionPatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VersionPatch {
      get { return versionPatch_; }
      set {
        versionPatch_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 8;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 9;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "checksum" field.</summary>
    public const int ChecksumFieldNumber = 10;
    private pb::ByteString checksum_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Checksum {
      get { return checksum_; }
      set {
        checksum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Artifact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Artifact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      if (AssetId != other.AssetId) return false;
      if (OS != other.OS) return false;
      if (Arch != other.Arch) return false;
      if (VersionMajor != other.VersionMajor) return false;
      if (VersionMinor != other.VersionMinor) return false;
      if (VersionPatch != other.VersionPatch) return false;
      if (Language != other.Language) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Checksum != other.Checksum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (OS.Length != 0) hash ^= OS.GetHashCode();
      if (Arch.Length != 0) hash ^= Arch.GetHashCode();
      if (VersionMajor != 0) hash ^= VersionMajor.GetHashCode();
      if (VersionMinor != 0) hash ^= VersionMinor.GetHashCode();
      if (VersionPatch != 0) hash ^= VersionPatch.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Checksum.Length != 0) hash ^= Checksum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetId);
      }
      if (OS.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OS);
      }
      if (Arch.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Arch);
      }
      if (VersionMajor != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(VersionMajor);
      }
      if (VersionMinor != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(VersionMinor);
      }
      if (VersionPatch != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(VersionPatch);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Language);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Timestamp);
      }
      if (Checksum.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Checksum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (AssetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetId);
      }
      if (OS.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OS);
      }
      if (Arch.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Arch);
      }
      if (VersionMajor != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(VersionMajor);
      }
      if (VersionMinor != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(VersionMinor);
      }
      if (VersionPatch != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(VersionPatch);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Language);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Timestamp);
      }
      if (Checksum.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(Checksum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (OS.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OS);
      }
      if (Arch.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Arch);
      }
      if (VersionMajor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VersionMajor);
      }
      if (VersionMinor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VersionMinor);
      }
      if (VersionPatch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VersionPatch);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Checksum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Checksum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Artifact other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.OS.Length != 0) {
        OS = other.OS;
      }
      if (other.Arch.Length != 0) {
        Arch = other.Arch;
      }
      if (other.VersionMajor != 0) {
        VersionMajor = other.VersionMajor;
      }
      if (other.VersionMinor != 0) {
        VersionMinor = other.VersionMinor;
      }
      if (other.VersionPatch != 0) {
        VersionPatch = other.VersionPatch;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Checksum.Length != 0) {
        Checksum = other.Checksum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            AssetId = input.ReadString();
            break;
          }
          case 26: {
            OS = input.ReadString();
            break;
          }
          case 34: {
            Arch = input.ReadString();
            break;
          }
          case 40: {
            VersionMajor = input.ReadUInt32();
            break;
          }
          case 48: {
            VersionMinor = input.ReadUInt32();
            break;
          }
          case 56: {
            VersionPatch = input.ReadUInt32();
            break;
          }
          case 66: {
            Language = input.ReadString();
            break;
          }
          case 72: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 82: {
            Checksum = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
          case 18: {
            AssetId = input.ReadString();
            break;
          }
          case 26: {
            OS = input.ReadString();
            break;
          }
          case 34: {
            Arch = input.ReadString();
            break;
          }
          case 40: {
            VersionMajor = input.ReadUInt32();
            break;
          }
          case 48: {
            VersionMinor = input.ReadUInt32();
            break;
          }
          case 56: {
            VersionPatch = input.ReadUInt32();
            break;
          }
          case 66: {
            Language = input.ReadString();
            break;
          }
          case 72: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 82: {
            Checksum = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Performance : pb::IMessage<Performance>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Performance> _parser = new pb::MessageParser<Performance>(() => new Performance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Performance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Animus.Structs.AnimusStructsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Performance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Performance(Performance other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      averageFPS_ = other.averageFPS_;
      averageLatency_ = other.averageLatency_;
      framesDropped_ = other.framesDropped_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Performance Clone() {
      return new Performance(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AverageFPS" field.</summary>
    public const int AverageFPSFieldNumber = 3;
    private double averageFPS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AverageFPS {
      get { return averageFPS_; }
      set {
        averageFPS_ = value;
      }
    }

    /// <summary>Field number for the "AverageLatency" field.</summary>
    public const int AverageLatencyFieldNumber = 4;
    private double averageLatency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AverageLatency {
      get { return averageLatency_; }
      set {
        averageLatency_ = value;
      }
    }

    /// <summary>Field number for the "FramesDropped" field.</summary>
    public const int FramesDroppedFieldNumber = 5;
    private double framesDropped_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FramesDropped {
      get { return framesDropped_; }
      set {
        framesDropped_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Performance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Performance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageFPS, other.AverageFPS)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageLatency, other.AverageLatency)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FramesDropped, other.FramesDropped)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (AverageFPS != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageFPS);
      if (AverageLatency != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageLatency);
      if (FramesDropped != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FramesDropped);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (AverageFPS != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AverageFPS);
      }
      if (AverageLatency != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AverageLatency);
      }
      if (FramesDropped != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(FramesDropped);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (AverageFPS != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(AverageFPS);
      }
      if (AverageLatency != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AverageLatency);
      }
      if (FramesDropped != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(FramesDropped);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (AverageFPS != 0D) {
        size += 1 + 8;
      }
      if (AverageLatency != 0D) {
        size += 1 + 8;
      }
      if (FramesDropped != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Performance other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.AverageFPS != 0D) {
        AverageFPS = other.AverageFPS;
      }
      if (other.AverageLatency != 0D) {
        AverageLatency = other.AverageLatency;
      }
      if (other.FramesDropped != 0D) {
        FramesDropped = other.FramesDropped;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 25: {
            AverageFPS = input.ReadDouble();
            break;
          }
          case 33: {
            AverageLatency = input.ReadDouble();
            break;
          }
          case 41: {
            FramesDropped = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 25: {
            AverageFPS = input.ReadDouble();
            break;
          }
          case 33: {
            AverageLatency = input.ReadDouble();
            break;
          }
          case 41: {
            FramesDropped = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
